Program #main Declaration-list $
Declaration-list Declaration Declaration-list
Declaration-list eps
Declaration Declaration-initial Declaration-prime
Declaration-initial Type-specifier #pid ID
Declaration-prime #func_declared Fun-declaration-prime
Declaration-prime Var-declaration-prime
Var-declaration-prime ; #init_var
Var-declaration-prime [ #pnum NUM ] ; #init_array
Fun-declaration-prime ( #new_scope Params ) #set_func_start Compound-stmt #return #end_scope
Type-specifier int #push_1
Type-specifier void #push_2
Params int #push_int #pid ID Param-prime Param-list
Params void #push_void Param-list-void-abtar
Param-list-void-abtar #pid ID Param-prime Param-list
Param-list-void-abtar eps #void_parameter_added
Param-list , Param Param-list
Param-list eps
Param Declaration-initial Param-prime
Param-prime [ ] #param_array_added
Param-prime #param_added eps
Compound-stmt { Declaration-list Statement-list }
Statement-list Statement Statement-list
Statement-list eps
Statement Expression-stmt
Statement Compound-stmt
Statement Selection-stmt
Statement Iteration-stmt
Statement Return-stmt
Statement Switch-stmt
Expression-stmt Expression ; #pop
Expression-stmt break #break ;
Expression-stmt ;
Selection-stmt if #if ( Expression #save ) Statement #jpf_save else Statement #jp
Iteration-stmt #break_temp while ( #label Expression #save ) Statement #while #set_break_temp
Return-stmt return Return-stmt-prime
Return-stmt-prime ;
Return-stmt-prime Expression #assign_to_func ;
Switch-stmt #break_temp switch ( Expression ) { Case-stmts Default-stmt } #pop #set_break_temp
Case-stmts Case-stmt Case-stmts
Case-stmts eps
Case-stmt case #pnum NUM #case #save : Statement-list #jp_case
Default-stmt default : Statement-list
Default-stmt eps
Expression Simple-expression-zegond
Expression #pid ID B
B = Expression #assign
B [ Expression ] #set_array_address H
B Simple-expression-prime
H = Expression #assign
H G D C
Simple-expression-zegond Additive-expression-zegond C
Simple-expression-prime Additive-expression-prime C
C Relop Additive-expression #compare
C eps
Relop < #push_1
Relop == #push_2
Additive-expression Term D
Additive-expression-prime Term-prime D
Additive-expression-zegond Term-zegond D
D Addop Term #add D
D eps
Addop + #push_1
Addop - #push_2
Term Signed-factor G
Term-prime Signed-factor-prime G
Term-zegond Signed-factor-zegond G
G * Signed-factor #mult G
G eps
Signed-factor + Factor
Signed-factor - Factor #minus_sign
Signed-factor Factor
Signed-factor-prime Factor-prime
Signed-factor-zegond + Factor
Signed-factor-zegond - Factor #minus_sign
Signed-factor-zegond Factor-zegond
Factor ( Expression )
Factor #pid ID Var-call-prime
Factor #pnum NUM
Var-call-prime #func_call_started ( Args ) #func_call_ended
Var-call-prime Var-prime
Var-prime [ Expression ] #set_array_address
Var-prime eps
Factor-prime #func_call_started ( Args ) #func_call_ended
Factor-prime eps
Factor-zegond ( Expression )
Factor-zegond #pnum NUM
Args Arg-list
Args eps
Arg-list #push_arg Expression #assign_arg #pop Arg-list-prime
Arg-list-prime , Expression Arg-list-prime
Arg-list-prime eps