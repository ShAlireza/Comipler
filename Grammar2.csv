Program -> Declaration-list $
Declaration-list -> Declaration Declaration-list
Declaration-list -> epsilon
Declaration -> Declaration-initial Declaration-prime
Declaration-initial -> Type-specifier #put_data #push_input ID
Declaration-prime -> #update_fun_type Fun-declaration-prime
Declaration-prime -> Var-declaration-prime #allocate_mem #end_declaration
Var-declaration-prime -> ; #	pnum1  #push0
Var-declaration-prime -> [ #pnum  NUM ] ; #push1
Fun-declaration-prime -> ( Params ) Compound-stmt
Type-specifier -> int #push0
Type-specifier -> void #push1
Params -> int ID Param-prime Param-list
Params -> void Param-list-void-abtar
Param-list-void-abtar -> ID Param-prime Param-list
Param-list-void-abtar -> epsilon
Param-list -> , Param Param-list
Param-list -> epsilon
Param -> Declaration-initial Param-prime
Param-prime -> [ ]
Param-prime -> epsilon
Compound-stmt -> { Declaration-list Statement-list }
Statement-list -> Statement Statement-list
Statement-list -> epsilon
Statement -> Expression-stmt
Statement -> Compound-stmt
Statement -> Selection-stmt
Statement -> Iteration-stmt
Statement -> Return-stmt
Statement -> Switch-stmt
Expression-stmt -> Expression ; #pop1
Expression-stmt -> break ;
Expression-stmt -> ;
Selection-stmt -> if ( Expression #save ) Statement #save #if_backpatch else Statement #else_backpatch
Iteration-stmt -> while ( #label Expression #save ) Statement #while
Return-stmt -> return Return-stmt-prime
Return-stmt-prime -> ;
Return-stmt-prime -> Expression ;
Switch-stmt -> switch ( Expression ) { Case-stmts Default-stmt }
Case-stmts -> Case-stmt Case-stmts
Case-stmts -> epsilon
Case-stmt -> case NUM : Statement-list
Default-stmt -> default : Statement-list
Default-stmt -> epsilon
Expression -> Simple-expression-zegond
Expression -> #pid ID B
B -> = Expression  #assign
B -> [ Expression ] #modify_array_address H
B -> Simple-expression-prime
H -> = Expression #assign
H -> G D C
Simple-expression-zegond -> Additive-expression-zegond C
Simple-expression-prime -> Additive-expression-prime C
C -> Relop Additive-expression #relop
C -> epsilon
Relop -> <  #push0
Relop -> == #push1
Additive-expression -> Term D
Additive-expression-prime -> Term-prime D
Additive-expression-zegond -> Term-zegond D
D -> Addop Term #add D
D -> epsilon
Addop -> + #push1
Addop -> - #push0
Term -> Signed-factor G
Term-prime -> Signed-factor-prime G
Term-zegond -> Signed-factor-zegond G
G -> * Signed-factor #mult G
G -> epsilon
Signed-factor -> + Factor
Signed-factor -> - Factor #mul_minus_one
Signed-factor -> Factor
Signed-factor-prime -> Factor-prime
Signed-factor-zegond -> + Factor
Signed-factor-zegond -> - Factor #mul_minus_one
Signed-factor-zegond -> Factor-zegond
Factor -> ( Expression )
Factor -> #pid ID Var-call-prime
Factor -> #pnum NUM
Var-call-prime -> ( Args )
Var-call-prime -> Var-prime
Var-prime -> [ Expression ] #modify_array_address
Var-prime -> epsilon
Factor-prime -> ( Args #output_handling )
Factor-prime -> epsilon
Factor-zegond -> ( Expression )
Factor-zegond -> #pnum NUM
Args -> Arg-list
Args -> epsilon
Arg-list -> Expression Arg-list-prime
Arg-list-prime -> , Expression Arg-list-prime
Arg-list-prime -> epsilon